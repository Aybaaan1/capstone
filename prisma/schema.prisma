// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  idnumber       String   @unique
  firstname      String
  lastname       String
  program        String
  password       String
  role           Role     @default(STUDENT) // Default role is set to 'STUDENT'
  image          String?  // Optional field for user profile image
  orders         Order[]
  items          Item[]
  reserves       Reserve[]
  assistances    Assistance[]

  
}

model Merch { //form for admin to add merch items
  id     Int     @id @default(autoincrement())
  name   String
  price  Float
  image  String?
  stocks Int
  type   String
  orders Order[]
}

model Order { //form for user in purchase
  id          Int      @id @default(autoincrement())
  userId      Int
  merchId     Int
  paymentMode String
  proof       String?
  status      String

  user        User     @relation(fields: [userId], references: [id])
  merch       Merch    @relation(fields: [merchId], references: [id])
}

model Item { //form for user for lost&found
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  place     String
  dateTime  DateTime
  image     String?
  type      String
  status    String

  user      User     @relation(fields: [userId], references: [id])
}

model ItemReservation { //form for admin to add item
  id     Int     @id @default(autoincrement())
  image  String?
  type   String
  status String
  res    Reserve[]
  
}

model Reserve { //form for user to reserve items
  id              Int             @id @default(autoincrement())
  itemId          Int
  userId          Int
  reserveDateTime DateTime
  returnDateTime  DateTime
  purpose         String
 
  item            ItemReservation @relation(fields: [itemId], references: [id])
  user            User            @relation(fields: [userId], references: [id])
}

model Assistance { //form for user to request cash assistance
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String
  patience  String
  dateTime  DateTime
  gcash     String
  proof     String?
  status    String

  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  STUDENT
  ADMIN
}